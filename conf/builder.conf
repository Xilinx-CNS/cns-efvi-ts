# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2020 - 2022 Xilinx, Inc. All rights reserved.
TE_PLATFORM([], [], [-D_GNU_SOURCE], [-D_GNU_SOURCE], [],
            [logger_core tools logic_expr conf_oid rpcxdr rpc_types asn ndn \
             ipc bsapi loggerten rcfapi confapi comm_net_engine rcfunix \
             tapi rcfrpc tapi_rpc tapi_env tapi_tad log_proc trc tapi_serial])

TE_TOOLS([rgt trc])

TE_TOOL_PARMS([trc], [--with-popups --with-log-urls])

TE_LIB_PARMS([tapi_tad], [], [],
             [--without-snmp --without-atm --without-bridge --without-iscsi --without-cli])

TE_LIB_PARMS([rpcxdr], [], [],
             [--with-rpcdefs=${EFVI_TS_LIBDIR}/efvirpc.x.m4,${TE_BASE}/lib/rpcxdr/tarpc_serial.x.m4])

. $TE_BASE/engine/builder/te_functions
define([TE_AGENT_BUILD], [
    if test -n "${$1}" -o "${$1_BUILD}" = local ; then
        if ! te_is_in_list "${$1_TA_TYPE}" $TE_BS_PLATFORMS ; then
            case "${$1_TA_TYPE}" in
                *aarch64*) TE_TA_HOST=aarch64-pc-linux ;;
                *64*) TE_TA_HOST=x86_64-pc-linux ;;
                *) echo "Unsupported ${$1_TA_TYPE}" >&2 ; exit 1 ;;
            esac

            TE_AGENT_BUILD_CC=${$1_CC}
            TE_AGENT_BUILD_CFLAGS=${$1_CFLAGS}
            test -n "$TE_AGENT_BUILD_CC" && TE_AGENT_BUILD_CC="CC=$TE_AGENT_BUILD_CC"

            TE_PLATFORM([${$1_TA_TYPE}], [$TE_AGENT_BUILD_CC],
                        [$TE_AGENT_BUILD_CFLAGS -D_GNU_SOURCE], [-D_GNU_SOURCE], [],
                        [logger_core tools conf_oid rpcxdr rpc_types asn ndn \
                         comm_net_agent loggerta rpctransport agentlib rpcserver rcfpch tad \
                         talib_efvi_ts netconf rpcs_serial ta_job])

            TE_LIB_PARMS([tad], [${$1_TA_TYPE}], [],
                         [--with-pcap --with-eth --with-arp --with-ipstack \
                          --with-dhcp --with-forw --without-static-libc])

            TE_LIB_PARMS([rpcxdr], [${$1_TA_TYPE}], [],
                         [--with-rpcdefs=../talib_efvi_ts/efvirpc.x.m4,tarpc_serial.x.m4])

            TE_LIB_PARMS([talib_efvi_ts], [${$1_TA_TYPE}], [${EFVI_TS_LIBDIR}])

            TE_LIB_PARMS([rcfpch], [${$1_TA_TYPE}], [], [--with-sniffers], [], [], [])

            TE_TA_TYPE([${$1_TA_TYPE}], [${$1_TA_TYPE}], [unix],
                       [--with-rcf-rpc \
                        --with-libnetconf \
                        --with-serialparse \
                        --with-sniffers=yes \
                        --without-static-libc \
                        --with-serial \
                        --disable-networkmanager-check],
                       [], [], [], [comm_net_agent ndn asn])

            TE_TA_APP([ta_rpcprovider], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [ta_rpcprovider], [], [],
                      [talib_efvi_ts rpcs_serial rpcserver agentlib rpcxdrta \
                       rpc_types rpctransport loggerta tools logger_core],
                      [\${EXT_SOURCES}/build.sh], [ta_rpcs], [])
        fi
    fi
])

TE_AGENT_BUILD([TE_IUT])
TE_AGENT_BUILD([TE_TST1])
TE_AGENT_BUILD([TE_TST2])
TE_AGENT_BUILD([TE_HYPERVISOR])
TE_AGENT_BUILD([TE_LOG_LISTENER])
